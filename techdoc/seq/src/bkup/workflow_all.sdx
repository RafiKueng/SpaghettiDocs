<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<diagram>
<source><![CDATA[user:Actor[p] "User"
browser:Browser[a] "Client (Browser)"
proxy:Server[a] "Proxy (ngineX)"
urls:Thread[a] "Server (urls.py)"
views:Views[a] "Server (views.py)"
utils:Views[a] "Server (utils.py)"
ds-sw:Thread[a] "Server (datasources/spacewarps.py)"
tasks:Tasks "Server (tasks.py)"
broker:Tasks "Broker (RabbitMQ)"
worker:Worker[a] "Worker (GLASS)"
db0:Database "Database (MySQL)"
db_sw:Database "SpaceWarps"
disk:HDD "Filesystem"
#db_ml:Database "MasterLens"
#dbR:Database "Database Celery Results"


user:browser.Visit "mite.phsyik.uzh.ch"
browser:<webapp>=proxy.GET('/index.html', ...)
proxy:<webapp>=disk.read(*.html, *.js, *.css)
browser:listOfSources=proxy.POST('/api/', {action='getSrcList'})
proxy:listOfSources=urls.POST('/api/', {action='getSrcList'})
urls:listOfSources=views[v0].api({action='getSrcList'})
views[v0]:listOfSources=[..., {id=3, name='spacewarps',...}, ...]=views._getSrcList()
browser:user.Show list of datasources
browser:stop
#[c]
*1 proxy
Proxy neglected where
not important
*1
*2 urls
urls.py translation omitted if 1:1
*2

user:browser.Select datasource
browser:dialogHTML=views.api({action:'selectSource', id:3})
views:html=ds-sw.getDialog()
browser:user.Show datasource dialog
browser:stop

user:browser.Enter swid
browser:resp=views.api({action='datasourceApi', src_id=3, do='fetch', *args})
views:resp=ds-sw.api({do='fetch', swid='ASW000XXX'})
ds-sw:resp={status='ok', list=lenses}=ds-sw._fetch(swid)
ds-sw:lenses=[{swid, metaid, img_urls}]=db_sw.*getData(swid)
browser:user.Show lens data
browser:stop

user:browser.Confirm and continue
browser:List<ModelId>=views.api({action='datasourceApi', do='createObj', data=[swid,]})
views:ds-sw.api({do='createObj', lenses=[swid,]})
ds-sw:List<model_id>=ds-sw._createObj(lenses)
[c:LOOP for each <swid> in <lenses>]
  #ds-sw:model_id=db0.LensData.getOrCreateEntry(swid)
  ds-sw:model_id=db0.LensData.getEntry(datasource=spacewarps, datasource_id=swid)
  [c:IF entryNotFound]
    ds-sw:lenses=[{swid, metaid, img_urls}]=db_sw.*getData(swid)
    ds-sw:model_id=db0.LensData.createEntry(datasource=spacewarps, datasource_id=swid)
  [/c]
[/c]
browser:modelData={model_id, url, *args}=views.POST('/get_modeldata/', {action='init', models=[<model_id>,]})
views:model=db0.LensData.getEntry(model_id)
browser:image=db_sw.GET(<images>)
browser:user.Show main UI
browser:stop


user:browser.Create model
browser:stop

user:browser.Simulate model
browser:resp=urls.POST('/save_model/', {model_id, model_str})
urls:resp={status='ok', result_id}=views.saveModel({model_id, model_str})
views:resultObject=utils[u0].EvalAndSaveJSON
utils[u0]:self.jsonObj=utils[u01].evalModelString()
utils[u0]:(self.points, self.ext_masses)=utils[u02].orderPoints2()
utils[u0]:utils[u02].creteModellingResult()
utils[u02]:self.result_id=db0.ModellingResult.create(*data)
utils[u0]:utils[u02].createConfigfile()
utils[u02]:disk.write('<result_id>/config.gls') [LOCAL]

browser:{result_id, status='STARTED' }=urls.GET('/result/<result_id>.json')
urls:views.getSimulationJSON(result_id)
views:task=tasks.calculateModel.apply_async(result_id)
tasks:broker[b0].createTask()
broker[b0]:>broker[b1].addToQueue(task)
#broker[0]:>tasks.
#tasks:stop

views:db0.ModellingResults.modifyEntry(result_id, {task_id\=task.task_id})&
views:_
urls:_
browser:_


broker[b1]:>worker[w0].delegateTask(task_id)
broker[b1]:stop
worker[w0]:db0.Tasks.modifyEntry(taskid, {status\='started'})
worker[w0]:file=disk.read(<result_id>/config.gls) [SSH]
worker[w0]:worker[w1].call_glass()

[c:UNTIL status='READY' or TIMEOUT]
  browser:{result_id, status='PENDING' }=views.GET('/result/<result_id>.json')
  views:task_id=db0.ModellingResults.getEntry(result_id).task_id&
  views:task_status='PENDING'=db0.Tasks.getEntry(task_id).task_status&
  views:_
  browser:_
[/c]

# finish task
worker[w0]:disk.write(<output_files>) [SSH]
worker[w0]:db0.Tasks.modifyEntry(taskid, {status\='finished'})
worker[w0]:stop

#check a thrid time
browser:{result_id, status='READY', imgs=[<url1>, <url2>...] }=views.GET('/result/<result_id>.json')
views:task_id=db0.ModellingResult.getEntry(result_id).task_id&
views:task=task_status='finished'=db0.Tasks.getEntry(task_id).task_status&
views:result.task_id=db0.ModellingResults.modifyEntry(result_id, {isRendered\=True})&

browser:image=proxy.GET('/result/<result_id>/<image>')
proxy:image=disk.read('/result/<result_id>/<image>') [LOCAL]
browser:user.Display results images
browser:stop

user:browser.Save result
browser:urls.POST('/save_model_final/', *args)
urls:views.saveModelFinal()
views:result_id=db0.ModellingResult.modifyEntry(result_id, {is_final\=True})&
browser:user.Display link to result page
browser:stop

user:browser.Visit results page
browser:<resultpage>=urls.GET('/data/<result_id>')
urls:views.getData(result_id)
views:result=db0.ModellingResult.getEntry(result_id)&
views:<resultpage>=views.renderUsingTemplate(result)
browser:user.Show result page
browser:stop


]]></source>
<configuration>
<property name="activationBarBorderThickness" value="1"/>
<property name="actorWidth" value="25"/>
<property name="arrowColor" value="-14803256"/>
<property name="arrowSize" value="6"/>
<property name="arrowThickness" value="3"/>
<property name="colorizeThreads" value="true"/>
<property name="destructorWidth" value="30"/>
<property name="explicitReturns" value="false"/>
<property family="Dialog" name="font" size="12" style="0"/>
<property name="fragmentBorderThickness" value="3"/>
<property name="fragmentEdgeColor" value="-16751616"/>
<property name="fragmentLabelBgColor" value="-36"/>
<property name="fragmentMargin" value="8"/>
<property name="fragmentPadding" value="10"/>
<property name="fragmentTextPadding" value="3"/>
<property name="glue" value="10"/>
<property name="headHeight" value="35"/>
<property name="headLabelPadding" value="5"/>
<property name="headWidth" value="100"/>
<property name="initialSpace" value="20"/>
<property name="labeledBoxBgColor" value="-76"/>
<property name="leftMargin" value="5"/>
<property name="lifelineThickness" value="3"/>
<property name="lineWrap" value="true"/>
<property name="lowerMargin" value="5"/>
<property name="mainLifelineWidth" value="8"/>
<property name="messageLabelSpace" value="3"/>
<property name="messagePadding" value="5"/>
<property name="noteBgColor" value="-76"/>
<property name="noteBorderThickness" value="1"/>
<property name="noteMargin" value="6"/>
<property name="notePadding" value="8"/>
<property name="opaqueMessageText" value="false"/>
<property name="returnArrowVisible" value="true"/>
<property name="rightMargin" value="5"/>
<property name="selfMessageHorizontalSpace" value="10"/>
<property name="separatorBottomMargin" value="8"/>
<property name="separatorTopMargin" value="15"/>
<property name="shouldShadowParticipants" value="true"/>
<property name="slackMode" value="false"/>
<property name="spaceBeforeActivation" value="4"/>
<property name="spaceBeforeAnswerToSelf" value="20"/>
<property name="spaceBeforeConstruction" value="6"/>
<property name="spaceBeforeSelfMessage" value="11"/>
<property name="subLifelineWidth" value="8"/>
<property name="tc0" value="-10027264"/>
<property name="tc1" value="-256"/>
<property name="tc2" value="-65536"/>
<property name="tc3" value="-16776961"/>
<property name="tc4" value="-6750004"/>
<property name="tc5" value="-16711681"/>
<property name="tc6" value="-65281"/>
<property name="tc7" value="-14336"/>
<property name="tc8" value="-20561"/>
<property name="tc9" value="-6711040"/>
<property name="threadNumbersVisible" value="false"/>
<property name="threaded" value="true"/>
<property name="upperMargin" value="5"/>
<property name="verticallySplit" value="true"/>
</configuration>
</diagram>
